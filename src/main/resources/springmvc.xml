<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <context:component-scan base-package="com.xry.controller"></context:component-scan>
    <import resource="classpath:applicationContext.xml"/>
    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀(jsp也可以配置视图解析器)
                        所谓视图就是我们展示给客户端的页面 例如html等
                        那前缀是什么呢 我们知道 / 在服务器端解析到当前web
                        假如我们想转发到index.html 路径就是/WEB-INF/templates/index.html
                        而前缀就是帮我们把/WEB-INF/templates/写好了 所以我们想访问index.html就只需要
                        index.html-->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 和前缀一个道理 例如我们想访问index.html 我们只需要写index
                         -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    <!--用xml 配置视图路径所需要返回的视图 开启这个必须要开启 <mvc:annotation-driven> 开启mvc注解驱动
    不然在index内的超链接发送的请求 注解无法解析 所以会404-->
    <!--当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示-->
    <!--
     path：设置处理的请求地址
     view-name：设置请求地址所对应的视图名称
 -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--    <mvc:view-controller path="/method" view-name="method"></mvc:view-controller>-->

    <!--
   处理静态资源，例如html、js、css、jpg
  若只设置该标签，则只能访问静态资源，其他请求则无法访问
  此时必须设置<mvc:annotation-driven/>解决问题
 -->
    <mvc:default-servlet-handler/>

    <!-- 开启mvc注解驱动 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <!-- 处理响应中文内容乱码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="defaultCharset" value="UTF-8" />
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html</value>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象 xml是通过id获取的 一定要声明id-->
   <!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>
    <mvc:interceptors>
        &lt;!&ndash;<bean class="com.xry.mvc.interceptor.One"></bean>&ndash;&gt;
        &lt;!&ndash;<ref bean="one"></ref> &ndash;&gt;&lt;!&ndash;这两个配置都是对DispatcherServlet所处理的所有的请求进行拦截&ndash;&gt;
        <ref bean="one"></ref>
        <ref bean="two"></ref>
        &lt;!&ndash;<mvc:interceptor>
            <mvc:mapping path="/**"/>&lt;!&ndash;注意 虽然在我们的普通使用在/*是表示全部目录 但是在拦截器下只表示/的一层目录
            /**/才表示全部目录&ndash;&gt;
            <mvc:exclude-mapping path="/"/>&lt;!&ndash;上面的/**/表示拦截所有的路径 exclude-mapping path表示不拦截该路径 也就是我们mvc设置的/ index&ndash;&gt;
            <ref bean="one"></ref>

        </mvc:interceptor>&ndash;&gt;
    </mvc:interceptors>-->
</beans>